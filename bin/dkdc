#!/usr/bin/env bash

# dkdc CLI - Simple management tool for dkdc services

set -euo pipefail

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

# Configuration
VPS_HOST="${VPS_IP:-}"
DEPLOY_DIR="/opt/dkdc"

function show_help() {
    cat << EOF
dkdc - Manage dkdc services

Usage: dkdc <command> [options]

Commands:
  deploy          Deploy latest changes to production
  logs [service]  View logs (optionally for specific service)
  status          Check service status
  restart         Restart all services
  ssl             Manage SSL certificates
  backup          Create backup of content and database
  help            Show this help message

Examples:
  dkdc deploy              # Deploy latest changes
  dkdc logs nginx          # View nginx logs
  dkdc logs                # View all logs
  dkdc status              # Check all services
  dkdc ssl renew           # Renew SSL certificates

Environment:
  VPS_IP          Set your VPS IP address (current: ${VPS_HOST:-not set})

EOF
}

function check_vps() {
    if [ -z "$VPS_HOST" ]; then
        echo -e "${RED}Error:${NC} VPS_IP environment variable not set"
        echo "Set it with: export VPS_IP=your.server.ip"
        exit 1
    fi
}

function deploy() {
    check_vps
    echo -e "${BLUE}Deploying to $VPS_HOST...${NC}"
    ./bin/deploy-update.sh "$VPS_HOST"
}

function logs() {
    check_vps
    local service="${1:-}"
    if [ -n "$service" ]; then
        echo -e "${BLUE}Viewing logs for $service...${NC}"
        ssh root@"$VPS_HOST" "cd $DEPLOY_DIR && docker compose logs -f $service"
    else
        echo -e "${BLUE}Viewing all logs...${NC}"
        ssh root@"$VPS_HOST" "cd $DEPLOY_DIR && docker compose logs -f"
    fi
}

function status() {
    check_vps
    echo -e "${BLUE}Checking service status...${NC}"
    ssh root@"$VPS_HOST" "cd $DEPLOY_DIR && docker compose ps"
    echo
    ssh root@"$VPS_HOST" "cd $DEPLOY_DIR && ./bin/health-check.sh" 2>/dev/null || true
}

function restart() {
    check_vps
    echo -e "${YELLOW}Restarting all services...${NC}"
    ssh root@"$VPS_HOST" "cd $DEPLOY_DIR && docker compose restart"
    echo -e "${GREEN}Services restarted!${NC}"
}

function ssl() {
    check_vps
    local action="${1:-status}"
    case "$action" in
        renew)
            echo -e "${BLUE}Renewing SSL certificates...${NC}"
            ssh root@"$VPS_HOST" "cd $DEPLOY_DIR && ./bin/ssl-setup.sh renew"
            ;;
        status|*)
            echo -e "${BLUE}Checking SSL certificate status...${NC}"
            ssh root@"$VPS_HOST" "certbot certificates"
            ;;
    esac
}

function backup() {
    check_vps
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local backup_name="dkdc_backup_${timestamp}.tar.gz"
    
    echo -e "${BLUE}Creating backup...${NC}"
    ssh root@"$VPS_HOST" "cd /opt && tar czf /tmp/$backup_name dkdc/websites dkdc/pgdata"
    
    echo -e "${BLUE}Downloading backup...${NC}"
    scp "root@$VPS_HOST:/tmp/$backup_name" "./$backup_name"
    
    ssh root@"$VPS_HOST" "rm /tmp/$backup_name"
    
    echo -e "${GREEN}Backup saved as: $backup_name${NC}"
}

# Main command handling
case "${1:-help}" in
    deploy)
        deploy
        ;;
    logs)
        logs "${2:-}"
        ;;
    status)
        status
        ;;
    restart)
        restart
        ;;
    ssl)
        ssl "${2:-status}"
        ;;
    backup)
        backup
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        show_help
        exit 1
        ;;
esac